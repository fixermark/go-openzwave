#!/usr/bin/env bash

PREFIX=CODE

enumerate()
{
    cat openzwave/cpp/src/Notification.h | grep Code | grep Code_ | sed "s/^.*Code/Code/" | sed "s/Code_//" | sed "s/[^A-Za-z].*//"
}

symbol()
{
    local t=$1
    echo $(echo $t | sed "s/\(.\)\([A-Z]\)/\1_\2/g" | tr [a-z] [A-Z])
}

mkdir -p $PREFIX && cat > $PREFIX/$PREFIX.go <<EOF
package $PREFIX;

//
// *** generated by scripts/$(basename $0)
//

// DO NOT EDIT THIS FILE

import "fmt"

const (
$(x=0; enumerate | while read t; do echo "   $(symbol $t) = $x"; let x=x+1; done)
)

var names = [...]string{
$(x=0; enumerate | while read t; do echo "      \"$PREFIX.$(symbol $t)\","; let x=x+1; done)
		"$PREFIX.UNKNOWN" }

const UNKNOWN = len(names)

type Enum struct {
     Code int
     Name string
}

func ToEnum(code int) Enum {	
     var x int;
     if code < 0 || code >= UNKNOWN {
     	x = UNKNOWN-1
     } else {
	x = code
     }	
     return Enum{code,names[x]}
}

func (val Enum) IsValid() bool {
    return val.Code >= 0 && val.Code < UNKNOWN;
}

func (val Enum) String() string {
     if val.IsValid() {
	return val.Name
     } else { 
        return fmt.Sprintf("%s[%d]", names[UNKNOWN-1], val.Code);
     }	
}

EOF
gofmt -s -w $PREFIX/$PREFIX.go && go build $PREFIX/$PREFIX.go
